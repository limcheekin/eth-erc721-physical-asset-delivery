{
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SmartCheck",
          "fullDescription": {
            "text": "Securify automatically checks for vulnerabilities and bad coding practices. It runs lexical and syntactical analysis on Solidity source code."
          },
          "informationUri": "https://tool.smartdec.net/",
          "rules": [
            {
              "id": "Ignore_19",
              "name": "IgnoreVulnerability",
              "shortDescription": {
                "text": "SOLIDITY_ADDRESS_HARDCODED"
              }
            },
            {
              "id": "Ignore_25",
              "name": "IgnoreVulnerability",
              "shortDescription": {
                "text": "SOLIDITY_EXTRA_GAS_IN_LOOPS"
              }
            },
            {
              "id": "DenialService_4",
              "name": "DenialServiceVulnerability",
              "shortDescription": {
                "text": "SOLIDITY_GAS_LIMIT_IN_LOOPS"
              }
            },
            {
              "id": "Ignore_28",
              "name": "IgnoreVulnerability",
              "shortDescription": {
                "text": "SOLIDITY_PRAGMAS_VERSION"
              }
            }
          ],
          "version": "0.0.12"
        }
      },
      "artifacts": [
        {
          "location": {
            "uri": "/royalties/contracts/impl/AbstractRoyalties.sol"
          },
          "sourceLanguage": "Solidity"
        }
      ],
      "logicalLocations": [
        {
          "kind": "contract",
          "name": "AbstractRoyalties"
        }
      ],
      "results": [
        {
          "message": {
            "text": "SOLIDITY_ADDRESS_HARDCODED"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/royalties/contracts/impl/AbstractRoyalties.sol"
                },
                "region": {
                  "snippet": {
                    "text": "0x0"
                  },
                  "startColumn": 53,
                  "startLine": 13
                }
              }
            }
          ],
          "ruleId": "Ignore_19"
        },
        {
          "message": {
            "text": "SOLIDITY_EXTRA_GAS_IN_LOOPS"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/royalties/contracts/impl/AbstractRoyalties.sol"
                },
                "region": {
                  "snippet": {
                    "text": "for(uinti=0;i<_royalties.length;i++){require(_royalties[i].account!=address(0x0),\"Recipient should be present\");require(_royalties[i].value!=0,\"Royalty value should be positive\");totalValue+=_royalties[i].value;royalties[id].push(_royalties[i]);}"
                  },
                  "startColumn": 8,
                  "startLine": 12
                }
              }
            }
          ],
          "ruleId": "Ignore_25"
        },
        {
          "message": {
            "text": "SOLIDITY_GAS_LIMIT_IN_LOOPS"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/royalties/contracts/impl/AbstractRoyalties.sol"
                },
                "region": {
                  "snippet": {
                    "text": "for(uinti=0;i<_royalties.length;i++){require(_royalties[i].account!=address(0x0),\"Recipient should be present\");require(_royalties[i].value!=0,\"Royalty value should be positive\");totalValue+=_royalties[i].value;royalties[id].push(_royalties[i]);}"
                  },
                  "startColumn": 8,
                  "startLine": 12
                }
              }
            }
          ],
          "ruleId": "DenialService_4"
        },
        {
          "message": {
            "text": "SOLIDITY_GAS_LIMIT_IN_LOOPS"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/royalties/contracts/impl/AbstractRoyalties.sol"
                },
                "region": {
                  "snippet": {
                    "text": "for(uinti=0;i<length;i++){if(royalties[_id][i].account==_from){royalties[_id][i].account=payable(address(uint160(_to)));}}"
                  },
                  "startColumn": 8,
                  "startLine": 24
                }
              }
            }
          ],
          "ruleId": "DenialService_4"
        },
        {
          "message": {
            "text": "SOLIDITY_PRAGMAS_VERSION"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/royalties/contracts/impl/AbstractRoyalties.sol"
                },
                "region": {
                  "snippet": {
                    "text": "^"
                  },
                  "startColumn": 16,
                  "startLine": 3
                }
              }
            }
          ],
          "ruleId": "Ignore_28"
        }
      ]
    }
  ],
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json"
}